#instalar bootstrap
npm i -D bootstrap @popperjs/core sass

carpeta resources/css renombrar a scss, cambiar extension del archivo app.css a app.scss

archivo scss
@import "../../node_modules/bootstrap/scss/bootstrap.scss";

archivo js/app.js

import './bootstrap';

import '../scss/app.scss';
import * from 'bootstrap';


************************************


php artisan make:model Category -m
php artisan make:model Product -m
php artisan make:migration create_category_product_table

$category = Category::find(1);
$products = $category->products()->get();
$category = Category::with('products')->find(1);

*******************************************************

php artisan storage:link



 $data = $request->validated();
        $data['slug'] = Str::slug($data['title']);
        Post::create($data);


# miGRACIONES

php artisan make:migration add_activo_to_users_table --table=users

#LIvewire
composer require livewire/livewire
php artisan make:livewire UserSearch
php artisan make:livewire CategorySearch
php artisan make:livewire ProductSearch
php artisan make:livewire ClientSearch


(lógica del componente)
app/Http/Livewire/ProductSearch.php

(vista del componente)
resources/views/livewire/product-search.blade.php


php artisan make:model Client -m

php artisan make:controller ClientController --model=Client

*********************************************************************

X Autenticación y Autorización
X Gestión de Productos
X Gestion de categorias
X Panel de Administración
X Sistema de Cache
X Manejo de roles (Admin/User)

- Carrito de Compras
- Proceso de Pago (Paypal, Stripe)
- pruebas unitarias

Lineamientos
● Inyección de Dependencias.
● Uso de Facade
● Registro servicio en service container
● Integración servicio tercero
● Uso de pruebas en navegador
● Uso de pest/PHPUnit (Mocks)
● Uso Livewire (Opcional) (Si se usa Livewire usar volt)
● Uso de convenciones en Laravel
● Use de Laravel pint ( Para el formateo de código)
- CSS/Bootstrap/Tailwind